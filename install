#!/usr/bin/env python3
import os
import sys
import shutil
import threading

print("application install started")
# path
ini_path = r'/etc/gateway'
print("ini file path: %s" % ini_path)
exec_path = r'/usr/local/bin'
print("exec file path: %s" % exec_path)

local_path = os.path.dirname(os.path.abspath(__file__))
print("local path: %s" % local_path)
config_path = os.path.join(local_path, 'config')
epd_path = os.path.join(local_path, 'epd_service')
web_path = os.path.join(local_path, 'web')
serial_path = os.path.join(local_path, 'serial')
epd_exec_path = os.path.join(exec_path, 'epd')
web_exec_path = os.path.join(exec_path, 'web')
serial_exec_path = os.path.join(exec_path, 'serial')
print("epd path:%s" % epd_exec_path)
print("web path:%s" % web_exec_path)
print("serial_path:%s" % serial_exec_path)

try:
    # 拷贝epd服务
    if os.path.exists(epd_exec_path):
        shutil.rmtree(epd_exec_path)
        # print("epd exec file path not exist")
        # os.makedirs(epd_exec_path)
        # print("create %s" % epd_exec_path)
    shutil.copytree(epd_path, epd_exec_path)
    # 拷贝web服务
    if os.path.exists(web_exec_path):
        shutil.rmtree(web_exec_path)
    shutil.copytree(web_path, web_exec_path)
    # 拷贝serial服务
    if os.path.exists(serial_exec_path):
        shutil.rmtree(serial_exec_path)
    shutil.copytree(serial_path, serial_exec_path)
    # 拷贝ini文件
    if not os.path.exists(ini_path):
        shutil.copytree(config_path, ini_path)
    else:
        ls = os.listdir(config_path)
        ls = set(ls)
        ld = os.listdir(ini_path)
        ld = set(ld)
        l = ls - ld
        for f in l:
            shutil.copy(os.path.join(config_path, f), ini_path)
except Exception as e:
    print("error: %s" % e.__str__())
    sys.exit(-1)

# 10秒之后重新启动
count = 10
def time_interval():
    global count
    count = count - 1
    print("reboot after %d ......" % count)
    if count:
        th = threading.Timer(1, time_interval)
        th.start()
    else:
        print("reboot now ......")
        os.system("reboot")

try:
    print("reboot after %d ......" % count)
    th = threading.Timer(1, time_interval)
    th.start()
except:
    print("reboot cancel ...")
sys.exit(0)
